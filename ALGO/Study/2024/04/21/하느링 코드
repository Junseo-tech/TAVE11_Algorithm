# 감시 피하기

from itertools import combinations
from copy import deepcopy

# 걸리는지 체크 함수
def check(graph, n, teachers):
    for i, j in teachers:
        for x in range(i - 1, -1, -1): # 상
            if graph[x][j] == 'O':
                break
            if graph[x][j] == 'S':
                return False
            
        for x in range(i + 1, n): # 하
            if graph[x][j] == 'O':
                break
            if graph[x][j] == 'S':
                return False
            
        for y in range(j - 1, -1, -1): # 좌
            if graph[i][y] == 'O':
                break
            if graph[i][y] == 'S':
                return False
            
        for y in range(j + 1, n): # 우
            if graph[i][y] == 'O':
                break
            if graph[i][y] == 'S':
                return False
            
    return True

n = int(input())
graph = []
emptys = []
teachers = []

for i in range(n):
    graph.append(list(input().split()))

for i in range(n):
    for j in range(n):
        if graph[i][j] == 'X':
            emptys.append([i, j])
        elif graph[i][j] == 'T':
            teachers.append([i, j])

for block in list(combinations(emptys, 3)):
    tmp_graph = deepcopy(graph)

    for i, j in block:
        tmp_graph[i][j] = 'O'

    if check(tmp_graph, n, teachers):
        print('YES')
        exit()

print('NO')